#!/usr/bin/python2 -tt

import os
import sys
import getopt
import time

sys.path.insert(0, './py/')
from epylog import *

class Logger:
    indent = '  '
    hangmsg = []
    hanging = 0
    
    def __init__(self, loglevel):
        self.loglevel = loglevel

    def is_quiet(self):
        if self.loglevel == 0:
            return 1
        else:
            return 0

    def debuglevel(self):
        return str(self.loglevel)

    def put(self, level, message):
        if (level <= self.loglevel):
            if self.hanging:
                self.hanging = 0
            print '%s%s' % (self.__getindent(), message)

    def puthang(self, level, message):
        if (level <= self.loglevel):
            print '%sInvoking: "%s"...' % (self.__getindent(), message)
            self.hanging = 1
            self.hangmsg.append(message)


    def endhang(self, level, message='done'):
        if (level <= self.loglevel):
            hangmsg = self.hangmsg.pop()
            if self.hanging:
                self.hanging = 0
                print '%s%s...%s' % (self.__getindent(), hangmsg, message)
            else:
                print '%s(Hanging from "%s")....%s' % (self.__getindent(),
                                                       hangmsg, message)

    def __getindent(self):
        indent = self.indent * len(self.hangmsg)
        return indent


def mkstamp(hours=0, days=0):
    now = int(time.time())
    hours = hours + (days * 24)
    then = now - (hours * 60 * 60)
    return then

def getTextVal(node):
    """
    getTextVal(node):
        The node is an element node containing text nodes. This function
        will concatenate the text nodes together and return them as one
        string. Any non-text nodes will be ignored.
    """
    val = ''
    for childnode in node.childNodes:
        if childnode.nodeType == childnode.TEXT_NODE:
            val = val + childnode.data
    return val

def unxmlify_offsets(ofile, logger):
    logger.put(5, '>epylog.unxmlify_offsets')
    logger.put(3, 'Checking if we can read "%s"' % ofile)
    if not os.access(ofile, os.R_OK):
        logger.put(3, 'Could not read offsets file "%s"' % ofile)
        logger.put(3, 'Returning blank tuple')
        logger.put(5, '<epylog.unxmlify_offsets')
        return []
    from xml.dom.minidom import parse
    try:
        doc = parse(ofile)
    except:
        logger.put(3, 'Could not parse offsets file "%s"' % ofile)
        logger.put(3, 'Returning blank tuple')
        logger.put(5, '<epylog.unxmlify_offsets')
        return []
    
    omap = []
    for node in doc.getElementsByTagName('entry'):
        if node.nodeType == node.ELEMENT_NODE:
            for cnode in node.childNodes:
                val = getTextVal(cnode)
                if cnode.nodeName == 'log':
                    entry = val
                elif cnode.nodeName == 'inode':
                    inode = int(val)
                elif cnode.nodeName == 'offset':
                    offset = int(val)
            omap.append([entry, inode, offset])
    logger.put(5, omap)
    logger.put(5, '<epylog.unxmlify_offsets')
    return omap

def xmlify_offsets(omap, ofile, logger):
    logger.put(5, '>epylog.xmlify_offsets')
    try:
        logger.put(3, 'Trying to open "%s" for writing.' % ofile)
        fh = open(ofile, 'w')
    except IOError:
        logger.put(0, 'Could not open "%s" for writing! Offsets not saved!')
        return
    from xml.dom.minidom import Document
    logger.puthang(3, 'Making XML out of offset map')
    doc = Document()
    epyel = doc.createElement('epylog-offsets')
    for entry in omap:
        entryel = doc.createElement('entry')
        logel = doc.createElement('log')
        logtx = doc.createTextNode(str(entry[0]))
        logel.appendChild(logtx)
        entryel.appendChild(logel)
        inodeel = doc.createElement('inode')
        inodetx = doc.createTextNode(str(entry[1]))
        inodeel.appendChild(inodetx)
        entryel.appendChild(inodeel)
        offsetel = doc.createElement('offset')
        offsettx = doc.createTextNode(str(entry[2]))
        offsetel.appendChild(offsettx)
        entryel.appendChild(offsetel)
        epyel.appendChild(entryel)
    doc.appendChild(epyel)
    logger.endhang(3)
    logger.put(5, doc.toprettyxml())
    import fcntl
    logger.put(3, 'Locking the offsets file')
    fcntl.flock(fh.fileno(), fcntl.LOCK_EX)
    logger.puthang(3, 'Writing the offsets into "%s"' % ofile)
    doc.writexml(fh)
    logger.endhang(3)
    logger.put(3, 'Unlocking the offsets file')
    fcntl.flock(fh.fileno(), fcntl.LOCK_UN)
    fh.close()
    logger.put(5, '<epylog.xmlify_offsets')

def restore_offsets(epylog):
    logger = epylog.logger
    logger.put(5, '>epylog.restore_offsets')
    ofile = os.path.join(epylog.vardir, 'offsets.xml')
    omap = unxmlify_offsets(ofile, logger)
    for o in omap:
        try:
            epylog.logtracker.set_start_offset_by_entry(o[0], o[1], o[2])
        except NoSuchLogError:
            logger.put(0, 'No such log in tracker: %s' % o[0])
    logger.put(5, '<epylog.restore_offsets')
    
def store_offsets(epylog):
    logger = epylog.logger
    logger.put(5, '>epylog.store_offsets')
    ofile = os.path.join(epylog.vardir, 'offsets.xml')
    omap = epylog.logtracker.get_offset_map()
    xmlify_offsets(omap, ofile, logger)
    logger.put(5, '<epylog.store_offsets')

def usage():
    print """
    Usage: epylog [--quiet] [--store-offsets] [--last] [-c] [-d]

        -c config-file
            read a custom config file instead of /etc/epylog/epylog.conf

        -d debug-level
            a number from 0 to 5. 0 means only critical output, while 5
            means lots and lots of debugging info.

        --store-offsets
            this will store an offset.xml file in /var/lib/epylog. This
            is useful when running epylog from cron, since then it relies
            on actual offsets as opposed to timestamps, which do not have to
            be accurate.

        --quiet
            completely identical to -d 0

        --last [hour|day|week|month]
            will analyze strings from the past [time period] specified.

        If no command-line options are provided, then the logs will be
        processed in their entirety (WARNING: this can mean a LOT of logs).
        A useful way to init a system would be to run:
        epylog --last [hour|day] --store-offsets

    Example:
        epylog --last day
    """
    sys.exit(1)

def main(args):
    debuglvl = 1
    o_stor = 0
    o_stamp = 0
    config_file = '/etc/epylog/epylog.conf'
    cmdargs = args[1:]
    try:
        gopts, cmds = getopt.getopt(cmdargs, 'd:c:h',
                                    ['quiet', 'store-offsets', 'last=',
                                     'help'])
        for o,a in gopts:
            if o == '-d':
                debuglvl = int(a)
            elif o == '--quiet':
                debuglvl = 0
            elif o == '--store-offsets':
                o_stor = 1
            elif o == '--last':
                if a == 'hour':
                    o_stamp = mkstamp(hours=1)
                elif a == 'day':
                    o_stamp = mkstamp(days=1)
                elif a == 'week':
                    o_stamp = mkstamp(days=7)
                elif a == 'month':
                    o_stamp = mkstamp(days=31)
                else:
                    usage()
            elif o == '-c':
                config_file = a
            elif o == '-h' or o == '--help':
                usage()
                
    except getopt.error, e:
        print 'Error: %s' % e
        usage()
    logger = Logger(debuglvl)
    logger.puthang(1, 'Initializing epylog')
    try:
        epylog = Epylog(config_file, logger)
    except (ConfigError, ModuleSanityError), e:
        logger.put(0, "Error returned: %s" % e)
        sys.exit(1)
    logger.endhang(1, 'done')
    if o_stamp == 0:
        logger.puthang(1, 'Restoring log offsets')
        restore_offsets(epylog)
        logger.endhang(1, 'done')
    else:
        logger.puthang(1, 'Setting the offsets by timestamp')
        epylog.logtracker.set_range_by_timestamps(o_stamp, int(time.time()))
        logger.endhang(1)
    logger.put(1, 'Invoking the module execution routines:')
    epylog.process_modules()
    logger.put(1, 'Finished processing modules')
    logger.puthang(1, 'Making the report')
    useful = epylog.make_report()
    logger.endhang(1, 'done')
    if useful:
        logger.puthang(1, 'Publishing the report')
        epylog.publish_report()
        logger.endhang(1, 'done')
        if o_stor:
            logger.puthang(1, 'Storing the offsets')
            store_offsets(epylog)
            logger.endhang(1, 'done')
        
    else:
        logger.put(1, 'Report is emtpy. Exiting.')

    logger.puthang(1, 'Cleaning up')
    epylog.cleanup()
    logger.endhang(1, 'done')

if __name__ == '__main__':
    main(sys.argv)

##
# Local Variables:
# mode: python
# End:
